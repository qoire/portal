<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
	<title>phpLens manual: Generate PHP Code</title>
</head>

<body bgcolor=white>
<p align=center><font size=2><a href=index.htm>Table of Contents</a></font></p>
<h2>Generate PHP Code</h2>
At the top of any of the dynamic editing screens is <b>Generate PHP Code</b>. Clicking on it
will bring up a new window with the source code for that phpLens object.<p></p>
You can use this code as a basis for your own program, or archive it as a backup of your current
phpLens object.<p>
<p>The code generated by phpLens can be broken into 2 parts. Code that must be 
  placed before any HTML because it involves HTTP header manipulation: 
<pre>
&lt;?php
include_once('/path/to/phplens.inc.php');
session_start();
// Place code above before any HTML is sent to client
?>
</pre>
<p>All other code can be placed anywhere in your HTML page.</p>
<p>If you have changed the PHP code previously, you will be glad to know that 
  phpLens preserves code changes that involve static strings or constants. To 
  preserve changes caused by setting variables, see Preserving Dynamic Changes 
  below. </p>

<h3>Live Environment Settings</h3>
In a live environment, security is important.  You can configure security with the following
properties:<p>

<table border=1 cellpadding=4 width=75%>
<tr>
<td>
<a href=prop/password.htm>password</a>
</td>
<td>
Password protect phpLens dynamic editing.
</td>
</tr>
<tr>
<td>
<a href=prop/dynEdit.htm>dynEdit</a>
</td>
<td>
For stronger security, you can disable phpLens dynamic editing completely by setting this property
to 0.
</td>
</tr>
</table>


<p>Other security properties can be reviewed in the <a href=security.htm>Security</a> section.</p>
<h3>Preserving Dynamic Changes</h3>
If you need to modify properties dynamically in your own code (typically because you need 
to set security parameters in a live environment)
<b>Generate PHP Code</b> will cause problems because it will overwrite your own code. 
To solve this problem and preserve your code changes,
put all this code in a function like this:
<pre>
function SetLens(&$lens)
{
global $ADMIN;
	if ($ADMIN) $lens->dynEdit = 1;
	else $lens->dynEdit = 0;
}
</pre>
<p>Then set this property like this:
<pre>
	$lens = PHPLensConnect(...);
	$lens->overrideFunction='SetLens';
	SetLens($lens);
	$lens->Render();
</pre>
<p> and the SetLens function call will be preserved on <b>Generate PHP Code</b>.

</body>
</html>
