<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
	<title>phpLens manual: Security</title>
</head>

<body bgcolor=white>
<p align=center><font size=2><a href=index.htm>Table of Contents</a></font></p>
<h2>Security</h2>
You can configure security with the following
properties:<p>

<table border=1 cellpadding=4 width=75%>
<tr>
<td>
<a href=prop/password.htm>password</a>
</td>
<td>
Password protect phpLens dynamic editing.
</td>
</tr>
<tr>
<td>
<a href=prop/bannedTags.htm>bannedTags</a>
</td>
<td>
If phpLens is configured to support HTML text (with the <a href=prop/htmlLens.htm>htmlLens</a> property),
 you can ban certain tags. The list of 
banned tags (expressed as a regular expression) is set with this property.<p>
All scripting, table, frame, div and object tags are banned.
</td>
</tr>
<tr>
<td>
<a href=prop/dynEdit.htm>dynEdit</a>
</td>
<td>
For stronger security, you can disable phpLens dynamic editing completely 
by setting this property to 0 or false.
</td>
</tr>
<tr>
<td>
<a href=prop/securityCheckReferer.htm>securityCheckReferer</a>
</td>
<td>
To ensure that the user who is modifying a record is not 
using an unauthorised Web server, we check that the referer when we save
is the same as the host server.
</td>
</tr>
</tr>
<tr>
<td>
<a href=prop/securityEditSeq.htm>securityEditSeq</a>
</td>
<td>
To keep track of the order of updates we store a sequence number for every New or Edit record.
A session cannot save a record from a stale New or Edit record.
<p>Also enables checksuming of fields that
can be edited, so no unauthorised field can be accessed by someone modifying the Web page.
</td>
</tr>
</table>
<h3>Field Sanitization</h3>
Form fields are sanitized before processing by properly quoting all  &lt; characters, and also 
single and double-quotes
so intruders cannot generate dangerous SQL statements from the following sql:
<pre>
select * from passwordtable where user='$user'
</pre>
by entering <b><i>john' or 'hack' = 'hack</i></b> into the input field. The following will
be generated by phpLens:
<pre>
select * from passwordtable where user='john\' or \'hack\' = \'hack'
</pre>
<p>
PhpLens also correctly handles magic-quotes, whether they are enabled or not.
<a name=secure>
<h2>Moving phpLens To A Secure Directory</h2>
Some users have asked how to make phpLens 100% secure. What we want do is to make the js and
gif files available to all web browsers, but prevent anyone else from accessing any of the phpLens 
include files.
<p>
We are assuming you are on Unix/Linux, and your <b>/u/htdocs</b> directory is the root of your web site.
<ol><li>
First password protect your <b>/u/htdocs/phplens</b> directory. 
Consult your web server documentation if you are not sure how to do this.<p>
<li>
Then create a an image directory (or something similar) and 
link to the img directory like this:
<pre>
mkdir /u/htdocs/images
cd /u/htdocs/images
ln -s /u/htdocs/phplens/img
</pre>
If you are on Windows, just copy the contents of phplens/img to the image/img directory.
Now we want the images will be accessible from /images/img...<p>
<li>
Modify your <b>/u/htdocs/phplens/config/phplens.config.inc.php</b> file. Uncomment the following
line and modify this:
<pre>
<b>$PHPLENS_GRAPHICS_SERVER='/images';</b>
</pre>
Make sure you do not put '/images/img' - this is wrong. Note that you can place the images on 
another web server also - that's why this variable is called PHPLENS_GRAPHICS_SERVER.<p>
<li>
If you have any images in the database that you want phpLens to display, you will need to move
the file /u/htdocs/phplens/phplens-img.php to another unprotected directory, say /images/img/phplens-img.php,
and set the following constant in <b>/u/htdocs/phplens/config/phplens.config.inc.php</b>:
<pre>
<b>define('PHPLENS_IMG_CODE','/images/img/phplens-img.php');</b>
</pre>
This file contains the code that displays the images.<p>
<li>Now the system is secure, and you can create phpLens objects safely, and prevent visitors from
accessing the Grid Builder.
</ol>
</body>

</html>
